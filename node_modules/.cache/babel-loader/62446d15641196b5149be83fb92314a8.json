{"ast":null,"code":"var _jsxFileName = \"/Users/kushalc/Downloads/ramp-fe-challenge/src/App.tsx\",\n    _s = $RefreshSig$();\n\n// import { Fragment, useCallback, useEffect, useState } from \"react\"\n// import { InputSelect } from \"./components/InputSelect\"\n// import { Instructions } from \"./components/Instructions\"\n// import { Transactions } from \"./components/Transactions\"\n// import { useEmployees } from \"./hooks/useEmployees\"\n// import { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\"\n// import { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\"\n// import { EMPTY_EMPLOYEE } from \"./utils/constants\"\n// import { Employee, Transaction } from \"./utils/types\"\n// export function App() {\n//   const { data: employees, loading: employeesLoading, ...employeeUtils } = useEmployees()\n//   const { data: paginatedTransactions, ...paginatedTransactionsUtils } = usePaginatedTransactions()\n//   const { data: transactionsByEmployee, ...transactionsByEmployeeUtils } = useTransactionsByEmployee()\n//   const [allTransactions, setAllTransactions] = useState<Transaction[]>([])\n//   const loadAllTransactions = useCallback(async () => {\n//     transactionsByEmployeeUtils.invalidateData()\n//     await employeeUtils.fetchAll()\n//     await paginatedTransactionsUtils.fetchAll() //Fetch transactions separately\n//   }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils])\n//   const loadTransactionsByEmployee = useCallback(\n//     async (employeeId: string) => {\n//       paginatedTransactionsUtils.invalidateData()\n//       await transactionsByEmployeeUtils.fetchById(employeeId)\n//     },\n//     [paginatedTransactionsUtils, transactionsByEmployeeUtils]\n//   )\n//   useEffect(() => {\n//     if (transactionsByEmployee) {\n//       setAllTransactions(transactionsByEmployee)\n//     } else if (paginatedTransactions?.data && allTransactions.length === 0) {\n//       setAllTransactions(paginatedTransactions.data)\n//     }\n//   }, [paginatedTransactions?.data, transactionsByEmployee, allTransactions])\n//   useEffect(() => {\n//     if (employees === null && !employeesLoading) {\n//       loadAllTransactions()\n//     }\n//   }, [employeesLoading, employees, loadAllTransactions])\n//   const handleViewMoreClick = async () => {\n//     await paginatedTransactionsUtils.fetchAll()\n//     if (paginatedTransactions?.data) {\n//       setAllTransactions((prevTransactions) => [...prevTransactions, ...paginatedTransactions.data])\n//     }\n//   }\n//   const employeeOptions = employees ? [EMPTY_EMPLOYEE, ...employees] : []\n//   const displayTransactions = transactionsByEmployee ?? allTransactions\n//   return (\n//     <Fragment>\n//       <main className=\"MainContainer\">\n//         <Instructions />\n//         <hr className=\"RampBreak--l\" />\n//         <InputSelect<Employee>\n//           isLoading={employeesLoading}\n//           defaultValue={EMPTY_EMPLOYEE}\n//           items={employeeOptions}\n//           label=\"Filter by employee\"\n//           loadingLabel=\"Loading employees\"\n//           parseItem={(item) => ({\n//             value: item.id,\n//             label: `${item.firstName} ${item.lastName}`,\n//           })}\n//           onChange={async (newValue) => {\n//             if (newValue === null) {\n//               return\n//             }\n//             if (newValue.id === EMPTY_EMPLOYEE.id) {\n//               setAllTransactions([])\n//               await loadAllTransactions()\n//             } else {\n//               await loadTransactionsByEmployee(newValue.id)\n//             }\n//           }}\n//         />\n//         <div className=\"RampBreak--l\" />\n//         <div className=\"RampGrid\">\n//           <Transactions transactions={displayTransactions} />\n//           {paginatedTransactions?.nextPage && !transactionsByEmployee && (\n//             <button\n//               className=\"RampButton\"\n//               disabled={paginatedTransactionsUtils.loading}\n//               onClick={handleViewMoreClick}\n//             >\n//               View More\n//             </button>\n//           )}\n//         </div>\n//       </main>\n//     </Fragment>\n//   )\n// }\nimport { Fragment, useCallback, useEffect, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n\n  const {\n    data: employees,\n    loading: employeesLoading,\n    ...employeeUtils\n  } = useEmployees();\n  const {\n    data: paginatedTransactions,\n    ...paginatedTransactionsUtils\n  } = usePaginatedTransactions();\n  const {\n    data: transactionsByEmployee,\n    ...transactionsByEmployeeUtils\n  } = useTransactionsByEmployee();\n  const [allTransactions, setAllTransactions] = useState([]);\n  const [transactionApprovals, setTransactionApprovals] = useState({});\n  const loadAllTransactions = useCallback(async () => {\n    transactionsByEmployeeUtils.invalidateData();\n    await employeeUtils.fetchAll();\n    await paginatedTransactionsUtils.fetchAll();\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  const loadTransactionsByEmployee = useCallback(async employeeId => {\n    paginatedTransactionsUtils.invalidateData();\n    await transactionsByEmployeeUtils.fetchById(employeeId);\n  }, [paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  useEffect(() => {\n    if (transactionsByEmployee) {\n      setAllTransactions(transactionsByEmployee);\n    } else if (paginatedTransactions !== null && paginatedTransactions !== void 0 && paginatedTransactions.data && allTransactions.length === 0) {\n      setAllTransactions(paginatedTransactions.data);\n    }\n  }, [paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.data, transactionsByEmployee, allTransactions]);\n  useEffect(() => {\n    if (employees === null && !employeesLoading) {\n      loadAllTransactions();\n    }\n  }, [employeesLoading, employees, loadAllTransactions]);\n\n  const handleViewMoreClick = async () => {\n    await paginatedTransactionsUtils.fetchAll();\n\n    if (paginatedTransactions !== null && paginatedTransactions !== void 0 && paginatedTransactions.data) {\n      setAllTransactions(prevTransactions => [...prevTransactions, ...paginatedTransactions.data]);\n    }\n  };\n\n  const setTransactionApproval = async _ref => {\n    let {\n      transactionId,\n      newValue\n    } = _ref;\n    setTransactionApprovals(prev => ({ ...prev,\n      [transactionId]: newValue\n    }));\n  };\n\n  const employeeOptions = employees ? [EMPTY_EMPLOYEE, ...employees] : [];\n  const displayTransactions = (transactionsByEmployee !== null && transactionsByEmployee !== void 0 ? transactionsByEmployee : allTransactions).map(transaction => {\n    var _transactionApprovals;\n\n    return { ...transaction,\n      approved: (_transactionApprovals = transactionApprovals[transaction.id]) !== null && _transactionApprovals !== void 0 ? _transactionApprovals : transaction.approved\n    };\n  });\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"MainContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputSelect, {\n        isLoading: employeesLoading,\n        defaultValue: EMPTY_EMPLOYEE,\n        items: employeeOptions,\n        label: \"Filter by employee\",\n        loadingLabel: \"Loading employees\",\n        parseItem: item => ({\n          value: item.id,\n          label: `${item.firstName} ${item.lastName}`\n        }),\n        onChange: async newValue => {\n          if (newValue === null) {\n            return;\n          }\n\n          if (newValue.id === EMPTY_EMPLOYEE.id) {\n            setAllTransactions([]);\n            await loadAllTransactions();\n          } else {\n            await loadTransactionsByEmployee(newValue.id);\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampGrid\",\n        children: [/*#__PURE__*/_jsxDEV(Transactions, {\n          transactions: displayTransactions,\n          setTransactionApproval: setTransactionApproval\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 11\n        }, this), (paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.nextPage) && !transactionsByEmployee && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"RampButton\",\n          disabled: paginatedTransactionsUtils.loading,\n          onClick: handleViewMoreClick,\n          children: \"View More\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 175,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"V5saooVmIBq6XC0md3z/7GqaaEg=\", false, function () {\n  return [useEmployees, usePaginatedTransactions, useTransactionsByEmployee];\n});\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Fragment","useCallback","useEffect","useState","InputSelect","Instructions","Transactions","useEmployees","usePaginatedTransactions","useTransactionsByEmployee","EMPTY_EMPLOYEE","App","data","employees","loading","employeesLoading","employeeUtils","paginatedTransactions","paginatedTransactionsUtils","transactionsByEmployee","transactionsByEmployeeUtils","allTransactions","setAllTransactions","transactionApprovals","setTransactionApprovals","loadAllTransactions","invalidateData","fetchAll","loadTransactionsByEmployee","employeeId","fetchById","length","handleViewMoreClick","prevTransactions","setTransactionApproval","transactionId","newValue","prev","employeeOptions","displayTransactions","map","transaction","approved","id","item","value","label","firstName","lastName","nextPage"],"sources":["/Users/kushalc/Downloads/ramp-fe-challenge/src/App.tsx"],"sourcesContent":["// import { Fragment, useCallback, useEffect, useState } from \"react\"\n// import { InputSelect } from \"./components/InputSelect\"\n// import { Instructions } from \"./components/Instructions\"\n// import { Transactions } from \"./components/Transactions\"\n// import { useEmployees } from \"./hooks/useEmployees\"\n// import { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\"\n// import { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\"\n// import { EMPTY_EMPLOYEE } from \"./utils/constants\"\n// import { Employee, Transaction } from \"./utils/types\"\n\n// export function App() {\n//   const { data: employees, loading: employeesLoading, ...employeeUtils } = useEmployees()\n//   const { data: paginatedTransactions, ...paginatedTransactionsUtils } = usePaginatedTransactions()\n//   const { data: transactionsByEmployee, ...transactionsByEmployeeUtils } = useTransactionsByEmployee()\n//   const [allTransactions, setAllTransactions] = useState<Transaction[]>([])\n\n//   const loadAllTransactions = useCallback(async () => {\n//     transactionsByEmployeeUtils.invalidateData()\n//     await employeeUtils.fetchAll()\n//     await paginatedTransactionsUtils.fetchAll() //Fetch transactions separately\n//   }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils])\n\n//   const loadTransactionsByEmployee = useCallback(\n//     async (employeeId: string) => {\n//       paginatedTransactionsUtils.invalidateData()\n//       await transactionsByEmployeeUtils.fetchById(employeeId)\n//     },\n//     [paginatedTransactionsUtils, transactionsByEmployeeUtils]\n//   )\n\n//   useEffect(() => {\n//     if (transactionsByEmployee) {\n//       setAllTransactions(transactionsByEmployee)\n//     } else if (paginatedTransactions?.data && allTransactions.length === 0) {\n//       setAllTransactions(paginatedTransactions.data)\n//     }\n//   }, [paginatedTransactions?.data, transactionsByEmployee, allTransactions])\n\n//   useEffect(() => {\n//     if (employees === null && !employeesLoading) {\n//       loadAllTransactions()\n//     }\n//   }, [employeesLoading, employees, loadAllTransactions])\n\n//   const handleViewMoreClick = async () => {\n//     await paginatedTransactionsUtils.fetchAll()\n\n//     if (paginatedTransactions?.data) {\n//       setAllTransactions((prevTransactions) => [...prevTransactions, ...paginatedTransactions.data])\n//     }\n//   }\n\n//   const employeeOptions = employees ? [EMPTY_EMPLOYEE, ...employees] : []\n//   const displayTransactions = transactionsByEmployee ?? allTransactions\n\n//   return (\n//     <Fragment>\n//       <main className=\"MainContainer\">\n//         <Instructions />\n//         <hr className=\"RampBreak--l\" />\n//         <InputSelect<Employee>\n//           isLoading={employeesLoading}\n//           defaultValue={EMPTY_EMPLOYEE}\n//           items={employeeOptions}\n//           label=\"Filter by employee\"\n//           loadingLabel=\"Loading employees\"\n//           parseItem={(item) => ({\n//             value: item.id,\n//             label: `${item.firstName} ${item.lastName}`,\n//           })}\n//           onChange={async (newValue) => {\n//             if (newValue === null) {\n//               return\n//             }\n\n//             if (newValue.id === EMPTY_EMPLOYEE.id) {\n//               setAllTransactions([])\n//               await loadAllTransactions()\n//             } else {\n//               await loadTransactionsByEmployee(newValue.id)\n//             }\n//           }}\n//         />\n//         <div className=\"RampBreak--l\" />\n//         <div className=\"RampGrid\">\n//           <Transactions transactions={displayTransactions} />\n//           {paginatedTransactions?.nextPage && !transactionsByEmployee && (\n//             <button\n//               className=\"RampButton\"\n//               disabled={paginatedTransactionsUtils.loading}\n//               onClick={handleViewMoreClick}\n//             >\n//               View More\n//             </button>\n//           )}\n//         </div>\n//       </main>\n//     </Fragment>\n//   )\n// }\n\nimport { Fragment, useCallback, useEffect, useState } from \"react\"\nimport { InputSelect } from \"./components/InputSelect\"\nimport { Instructions } from \"./components/Instructions\"\nimport { Transactions } from \"./components/Transactions\"\nimport { useEmployees } from \"./hooks/useEmployees\"\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\"\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\"\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\"\nimport { Employee, Transaction } from \"./utils/types\"\n\nexport function App() {\n  const { data: employees, loading: employeesLoading, ...employeeUtils } = useEmployees()\n  const { data: paginatedTransactions, ...paginatedTransactionsUtils } = usePaginatedTransactions()\n  const { data: transactionsByEmployee, ...transactionsByEmployeeUtils } = useTransactionsByEmployee()\n  const [allTransactions, setAllTransactions] = useState<Transaction[]>([])\n  const [transactionApprovals, setTransactionApprovals] = useState<Record<string, boolean>>({})\n\n  const loadAllTransactions = useCallback(async () => {\n    transactionsByEmployeeUtils.invalidateData()\n    await employeeUtils.fetchAll()\n    await paginatedTransactionsUtils.fetchAll()\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils])\n\n  const loadTransactionsByEmployee = useCallback(\n    async (employeeId: string) => {\n      paginatedTransactionsUtils.invalidateData()\n      await transactionsByEmployeeUtils.fetchById(employeeId)\n    },\n    [paginatedTransactionsUtils, transactionsByEmployeeUtils]\n  )\n\n  useEffect(() => {\n    if (transactionsByEmployee) {\n      setAllTransactions(transactionsByEmployee)\n    } else if (paginatedTransactions?.data && allTransactions.length === 0) {\n      setAllTransactions(paginatedTransactions.data)\n    }\n  }, [paginatedTransactions?.data, transactionsByEmployee, allTransactions])\n\n  useEffect(() => {\n    if (employees === null && !employeesLoading) {\n      loadAllTransactions()\n    }\n  }, [employeesLoading, employees, loadAllTransactions])\n\n  const handleViewMoreClick = async () => {\n    await paginatedTransactionsUtils.fetchAll()\n\n    if (paginatedTransactions?.data) {\n      setAllTransactions((prevTransactions) => [...prevTransactions, ...paginatedTransactions.data])\n    }\n  }\n\n  const setTransactionApproval = async ({\n    transactionId,\n    newValue,\n  }: {\n    transactionId: string\n    newValue: boolean\n  }) => {\n    setTransactionApprovals((prev) => ({\n      ...prev,\n      [transactionId]: newValue,\n    }))\n  }\n\n  const employeeOptions = employees ? [EMPTY_EMPLOYEE, ...employees] : []\n  const displayTransactions = (transactionsByEmployee ?? allTransactions).map((transaction) => ({\n    ...transaction,\n    approved: transactionApprovals[transaction.id] ?? transaction.approved,\n  }))\n\n  return (\n    <Fragment>\n      <main className=\"MainContainer\">\n        <Instructions />\n        <hr className=\"RampBreak--l\" />\n        <InputSelect<Employee>\n          isLoading={employeesLoading}\n          defaultValue={EMPTY_EMPLOYEE}\n          items={employeeOptions}\n          label=\"Filter by employee\"\n          loadingLabel=\"Loading employees\"\n          parseItem={(item) => ({\n            value: item.id,\n            label: `${item.firstName} ${item.lastName}`,\n          })}\n          onChange={async (newValue) => {\n            if (newValue === null) {\n              return\n            }\n\n            if (newValue.id === EMPTY_EMPLOYEE.id) {\n              setAllTransactions([])\n              await loadAllTransactions()\n            } else {\n              await loadTransactionsByEmployee(newValue.id)\n            }\n          }}\n        />\n        <div className=\"RampBreak--l\" />\n        <div className=\"RampGrid\">\n          <Transactions\n            transactions={displayTransactions}\n            setTransactionApproval={setTransactionApproval}\n          />\n          {paginatedTransactions?.nextPage && !transactionsByEmployee && (\n            <button\n              className=\"RampButton\"\n              disabled={paginatedTransactionsUtils.loading}\n              onClick={handleViewMoreClick}\n            >\n              View More\n            </button>\n          )}\n        </div>\n      </main>\n    </Fragment>\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}