{"ast":null,"code":"var _jsxFileName = \"/Users/kushalc/Downloads/ramp-fe-challenge/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport { Fragment, useCallback, useEffect, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n\n  // const { data: employees, ...employeeUtils } = useEmployees()\n  const {\n    data: employees,\n    loading: employeesLoading,\n    ...employeeUtils\n  } = useEmployees();\n  const {\n    data: paginatedTransactions,\n    ...paginatedTransactionsUtils\n  } = usePaginatedTransactions();\n  const {\n    data: transactionsByEmployee,\n    ...transactionsByEmployeeUtils\n  } = useTransactionsByEmployee();\n  const [isLoading, setIsLoading] = useState(false);\n  const [allTransactions, setAllTransactions] = useState([]); // const loadAllTransactions = useCallback(async () => {\n  //   setIsLoading(true)\n  //   transactionsByEmployeeUtils.invalidateData()\n  //   await employeeUtils.fetchAll()\n  //   await paginatedTransactionsUtils.fetchAll()\n  //   setIsLoading(false)\n  // }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils])\n\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true);\n    transactionsByEmployeeUtils.invalidateData();\n    await employeeUtils.fetchAll(); // ✅ Fetch employees first\n\n    setIsLoading(false); // ✅ Stop loading for employees\n\n    await paginatedTransactionsUtils.fetchAll(); // ✅ Fetch transactions separately\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  const loadTransactionsByEmployee = useCallback(async employeeId => {\n    setIsLoading(true);\n    paginatedTransactionsUtils.invalidateData();\n    await transactionsByEmployeeUtils.fetchById(employeeId);\n    setIsLoading(false);\n  }, [paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  useEffect(() => {\n    if (transactionsByEmployee) {\n      setAllTransactions(transactionsByEmployee);\n    } else if (paginatedTransactions !== null && paginatedTransactions !== void 0 && paginatedTransactions.data && allTransactions.length === 0) {\n      setAllTransactions(paginatedTransactions.data);\n    }\n  }, [paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.data, transactionsByEmployee, allTransactions]);\n  useEffect(() => {\n    if (employees === null && !employeesLoading) {\n      loadAllTransactions();\n    }\n  }, [employeesLoading, employees, loadAllTransactions]);\n\n  const handleViewMoreClick = async () => {\n    await paginatedTransactionsUtils.fetchAll();\n\n    if (paginatedTransactions !== null && paginatedTransactions !== void 0 && paginatedTransactions.data) {\n      setAllTransactions(prevTransactions => [...prevTransactions, ...paginatedTransactions.data]);\n    }\n  };\n\n  const employeeOptions = employees ? [EMPTY_EMPLOYEE, ...employees] : [];\n  const displayTransactions = transactionsByEmployee !== null && transactionsByEmployee !== void 0 ? transactionsByEmployee : allTransactions;\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"MainContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputSelect, {\n        // isLoading={isLoading}\n        isLoading: employeesLoading,\n        defaultValue: EMPTY_EMPLOYEE,\n        items: employeeOptions,\n        label: \"Filter by employee\",\n        loadingLabel: \"Loading employees\",\n        parseItem: item => ({\n          value: item.id,\n          label: `${item.firstName} ${item.lastName}`\n        }),\n        onChange: async newValue => {\n          if (newValue === null) {\n            return;\n          }\n\n          if (newValue.id === EMPTY_EMPLOYEE.id) {\n            setAllTransactions([]);\n            await loadAllTransactions();\n          } else {\n            await loadTransactionsByEmployee(newValue.id);\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampGrid\",\n        children: [/*#__PURE__*/_jsxDEV(Transactions, {\n          transactions: displayTransactions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this), (paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.nextPage) && !transactionsByEmployee && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"RampButton\",\n          disabled: paginatedTransactionsUtils.loading,\n          onClick: handleViewMoreClick,\n          children: \"View More\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"MIXc3kznixMR0Pxd4uql1XNmql8=\", false, function () {\n  return [useEmployees, usePaginatedTransactions, useTransactionsByEmployee];\n});\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Fragment","useCallback","useEffect","useState","InputSelect","Instructions","Transactions","useEmployees","usePaginatedTransactions","useTransactionsByEmployee","EMPTY_EMPLOYEE","App","data","employees","loading","employeesLoading","employeeUtils","paginatedTransactions","paginatedTransactionsUtils","transactionsByEmployee","transactionsByEmployeeUtils","isLoading","setIsLoading","allTransactions","setAllTransactions","loadAllTransactions","invalidateData","fetchAll","loadTransactionsByEmployee","employeeId","fetchById","length","handleViewMoreClick","prevTransactions","employeeOptions","displayTransactions","item","value","id","label","firstName","lastName","newValue","nextPage"],"sources":["/Users/kushalc/Downloads/ramp-fe-challenge/src/App.tsx"],"sourcesContent":["import { Fragment, useCallback, useEffect, useState } from \"react\"\nimport { InputSelect } from \"./components/InputSelect\"\nimport { Instructions } from \"./components/Instructions\"\nimport { Transactions } from \"./components/Transactions\"\nimport { useEmployees } from \"./hooks/useEmployees\"\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\"\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\"\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\"\nimport { Employee, Transaction } from \"./utils/types\"\n\nexport function App() {\n  // const { data: employees, ...employeeUtils } = useEmployees()\n  const { data: employees, loading: employeesLoading, ...employeeUtils } = useEmployees()\n  const { data: paginatedTransactions, ...paginatedTransactionsUtils } = usePaginatedTransactions()\n  const { data: transactionsByEmployee, ...transactionsByEmployeeUtils } = useTransactionsByEmployee()\n  const [isLoading, setIsLoading] = useState(false)\n  const [allTransactions, setAllTransactions] = useState<Transaction[]>([])\n\n  // const loadAllTransactions = useCallback(async () => {\n  //   setIsLoading(true)\n  //   transactionsByEmployeeUtils.invalidateData()\n  //   await employeeUtils.fetchAll()\n  //   await paginatedTransactionsUtils.fetchAll()\n  //   setIsLoading(false)\n  // }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils])\n\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true)\n    transactionsByEmployeeUtils.invalidateData()\n\n    await employeeUtils.fetchAll() // ✅ Fetch employees first\n    setIsLoading(false) // ✅ Stop loading for employees\n\n    await paginatedTransactionsUtils.fetchAll() // ✅ Fetch transactions separately\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils])\n\n  const loadTransactionsByEmployee = useCallback(\n    async (employeeId: string) => {\n      setIsLoading(true)\n      paginatedTransactionsUtils.invalidateData()\n      await transactionsByEmployeeUtils.fetchById(employeeId)\n      setIsLoading(false)\n    },\n    [paginatedTransactionsUtils, transactionsByEmployeeUtils]\n  )\n\n  useEffect(() => {\n    if (transactionsByEmployee) {\n      setAllTransactions(transactionsByEmployee)\n    } else if (paginatedTransactions?.data && allTransactions.length === 0) {\n      setAllTransactions(paginatedTransactions.data)\n    }\n  }, [paginatedTransactions?.data, transactionsByEmployee, allTransactions])\n\n  useEffect(() => {\n    if (employees === null && !employeesLoading) {\n      loadAllTransactions()\n    }\n  }, [employeesLoading, employees, loadAllTransactions])\n\n  const handleViewMoreClick = async () => {\n    await paginatedTransactionsUtils.fetchAll()\n\n    if (paginatedTransactions?.data) {\n      setAllTransactions((prevTransactions) => [...prevTransactions, ...paginatedTransactions.data])\n    }\n  }\n\n  const employeeOptions = employees ? [EMPTY_EMPLOYEE, ...employees] : []\n  const displayTransactions = transactionsByEmployee ?? allTransactions\n\n  return (\n    <Fragment>\n      <main className=\"MainContainer\">\n        <Instructions />\n        <hr className=\"RampBreak--l\" />\n        <InputSelect<Employee>\n          // isLoading={isLoading}\n          isLoading={employeesLoading}\n          defaultValue={EMPTY_EMPLOYEE}\n          items={employeeOptions}\n          label=\"Filter by employee\"\n          loadingLabel=\"Loading employees\"\n          parseItem={(item) => ({\n            value: item.id,\n            label: `${item.firstName} ${item.lastName}`,\n          })}\n          onChange={async (newValue) => {\n            if (newValue === null) {\n              return\n            }\n\n            if (newValue.id === EMPTY_EMPLOYEE.id) {\n              setAllTransactions([])\n              await loadAllTransactions()\n            } else {\n              await loadTransactionsByEmployee(newValue.id)\n            }\n          }}\n        />\n        <div className=\"RampBreak--l\" />\n        <div className=\"RampGrid\">\n          <Transactions transactions={displayTransactions} />\n          {paginatedTransactions?.nextPage && !transactionsByEmployee && (\n            <button\n              className=\"RampButton\"\n              disabled={paginatedTransactionsUtils.loading}\n              onClick={handleViewMoreClick}\n            >\n              View More\n            </button>\n          )}\n        </div>\n      </main>\n    </Fragment>\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}