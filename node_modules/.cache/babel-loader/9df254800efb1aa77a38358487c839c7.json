{"ast":null,"code":"import mockData from \"../mock-data.json\";\nconst TRANSACTIONS_PER_PAGE = 5;\nconst data = {\n  employees: mockData.employees,\n  transactions: mockData.transactions\n}; // export const getEmployees = (): Employee[] => data.employees\n\nexport const getEmployees = () => {\n  const allEmployeesOption = {\n    id: \"ALL\",\n    firstName: \"All\",\n    lastName: \"Employees\"\n  };\n  return [allEmployeesOption, ...data.employees];\n};\nexport const getTransactionsPaginated = _ref => {\n  let {\n    page\n  } = _ref;\n\n  if (page === null) {\n    throw new Error(\"Page cannot be null\");\n  }\n\n  const start = page * TRANSACTIONS_PER_PAGE;\n  const end = start + TRANSACTIONS_PER_PAGE;\n\n  if (start > data.transactions.length) {\n    throw new Error(`Invalid page ${page}`);\n  }\n\n  const nextPage = end < data.transactions.length ? page + 1 : null;\n  return {\n    nextPage,\n    data: data.transactions.slice(start, end)\n  };\n};\nexport const getTransactionsByEmployee = _ref2 => {\n  let {\n    employeeId\n  } = _ref2;\n\n  if (!employeeId) {\n    throw new Error(\"Employee id cannot be empty\");\n  }\n\n  if (employeeId === \"ALL\") {\n    return data.transactions;\n  }\n\n  return data.transactions.filter(transaction => transaction.employee.id === employeeId);\n};\nexport const setTransactionApproval = _ref3 => {\n  let {\n    transactionId,\n    value\n  } = _ref3;\n  const transaction = data.transactions.find(currentTransaction => currentTransaction.id === transactionId);\n\n  if (!transaction) {\n    throw new Error(\"Invalid transaction to approve\");\n  }\n\n  transaction.approved = value;\n};","map":{"version":3,"names":["mockData","TRANSACTIONS_PER_PAGE","data","employees","transactions","getEmployees","allEmployeesOption","id","firstName","lastName","getTransactionsPaginated","page","Error","start","end","length","nextPage","slice","getTransactionsByEmployee","employeeId","filter","transaction","employee","setTransactionApproval","transactionId","value","find","currentTransaction","approved"],"sources":["/Users/kushalc/Downloads/ramp-fe-challenge/src/utils/requests.ts"],"sourcesContent":["import {\n  PaginatedRequestParams,\n  PaginatedResponse,\n  RequestByEmployeeParams,\n  SetTransactionApprovalParams,\n  Transaction,\n  Employee,\n} from \"./types\"\nimport mockData from \"../mock-data.json\"\n\nconst TRANSACTIONS_PER_PAGE = 5\n\nconst data: { employees: Employee[]; transactions: Transaction[] } = {\n  employees: mockData.employees,\n  transactions: mockData.transactions,\n}\n\n// export const getEmployees = (): Employee[] => data.employees\nexport const getEmployees = (): Employee[] => {\n  const allEmployeesOption: Employee = { id: \"ALL\", firstName: \"All\", lastName: \"Employees\" }\n  return [allEmployeesOption, ...data.employees]\n}\n\nexport const getTransactionsPaginated = ({\n  page,\n}: PaginatedRequestParams): PaginatedResponse<Transaction[]> => {\n  if (page === null) {\n    throw new Error(\"Page cannot be null\")\n  }\n\n  const start = page * TRANSACTIONS_PER_PAGE\n  const end = start + TRANSACTIONS_PER_PAGE\n\n  if (start > data.transactions.length) {\n    throw new Error(`Invalid page ${page}`)\n  }\n\n  const nextPage = end < data.transactions.length ? page + 1 : null\n\n  return {\n    nextPage,\n    data: data.transactions.slice(start, end),\n  }\n}\n\nexport const getTransactionsByEmployee = ({ employeeId }: RequestByEmployeeParams) => {\n  if (!employeeId) {\n    throw new Error(\"Employee id cannot be empty\")\n  }\n  if (employeeId === \"ALL\") {\n    return data.transactions\n  }\n\n  return data.transactions.filter((transaction) => transaction.employee.id === employeeId)\n}\n\nexport const setTransactionApproval = ({ transactionId, value }: SetTransactionApprovalParams): void => {\n  const transaction = data.transactions.find(\n    (currentTransaction) => currentTransaction.id === transactionId\n  )\n\n  if (!transaction) {\n    throw new Error(\"Invalid transaction to approve\")\n  }\n\n  transaction.approved = value\n}\n"],"mappings":"AAQA,OAAOA,QAAP,MAAqB,mBAArB;AAEA,MAAMC,qBAAqB,GAAG,CAA9B;AAEA,MAAMC,IAA4D,GAAG;EACnEC,SAAS,EAAEH,QAAQ,CAACG,SAD+C;EAEnEC,YAAY,EAAEJ,QAAQ,CAACI;AAF4C,CAArE,C,CAKA;;AACA,OAAO,MAAMC,YAAY,GAAG,MAAkB;EAC5C,MAAMC,kBAA4B,GAAG;IAAEC,EAAE,EAAE,KAAN;IAAaC,SAAS,EAAE,KAAxB;IAA+BC,QAAQ,EAAE;EAAzC,CAArC;EACA,OAAO,CAACH,kBAAD,EAAqB,GAAGJ,IAAI,CAACC,SAA7B,CAAP;AACD,CAHM;AAKP,OAAO,MAAMO,wBAAwB,GAAG,QAEwB;EAAA,IAFvB;IACvCC;EADuC,CAEuB;;EAC9D,IAAIA,IAAI,KAAK,IAAb,EAAmB;IACjB,MAAM,IAAIC,KAAJ,CAAU,qBAAV,CAAN;EACD;;EAED,MAAMC,KAAK,GAAGF,IAAI,GAAGV,qBAArB;EACA,MAAMa,GAAG,GAAGD,KAAK,GAAGZ,qBAApB;;EAEA,IAAIY,KAAK,GAAGX,IAAI,CAACE,YAAL,CAAkBW,MAA9B,EAAsC;IACpC,MAAM,IAAIH,KAAJ,CAAW,gBAAeD,IAAK,EAA/B,CAAN;EACD;;EAED,MAAMK,QAAQ,GAAGF,GAAG,GAAGZ,IAAI,CAACE,YAAL,CAAkBW,MAAxB,GAAiCJ,IAAI,GAAG,CAAxC,GAA4C,IAA7D;EAEA,OAAO;IACLK,QADK;IAELd,IAAI,EAAEA,IAAI,CAACE,YAAL,CAAkBa,KAAlB,CAAwBJ,KAAxB,EAA+BC,GAA/B;EAFD,CAAP;AAID,CApBM;AAsBP,OAAO,MAAMI,yBAAyB,GAAG,SAA6C;EAAA,IAA5C;IAAEC;EAAF,CAA4C;;EACpF,IAAI,CAACA,UAAL,EAAiB;IACf,MAAM,IAAIP,KAAJ,CAAU,6BAAV,CAAN;EACD;;EACD,IAAIO,UAAU,KAAK,KAAnB,EAA0B;IACxB,OAAOjB,IAAI,CAACE,YAAZ;EACD;;EAED,OAAOF,IAAI,CAACE,YAAL,CAAkBgB,MAAlB,CAA0BC,WAAD,IAAiBA,WAAW,CAACC,QAAZ,CAAqBf,EAArB,KAA4BY,UAAtE,CAAP;AACD,CATM;AAWP,OAAO,MAAMI,sBAAsB,GAAG,SAAkE;EAAA,IAAjE;IAAEC,aAAF;IAAiBC;EAAjB,CAAiE;EACtG,MAAMJ,WAAW,GAAGnB,IAAI,CAACE,YAAL,CAAkBsB,IAAlB,CACjBC,kBAAD,IAAwBA,kBAAkB,CAACpB,EAAnB,KAA0BiB,aADhC,CAApB;;EAIA,IAAI,CAACH,WAAL,EAAkB;IAChB,MAAM,IAAIT,KAAJ,CAAU,gCAAV,CAAN;EACD;;EAEDS,WAAW,CAACO,QAAZ,GAAuBH,KAAvB;AACD,CAVM"},"metadata":{},"sourceType":"module"}