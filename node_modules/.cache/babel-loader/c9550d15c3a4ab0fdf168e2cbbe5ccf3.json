{"ast":null,"code":"var _jsxFileName = \"/Users/kushalc/Downloads/ramp-fe-challenge/src/components/Transactions/TransactionPane.tsx\";\n// import { useState } from \"react\"\n// import { InputCheckbox } from \"../InputCheckbox\"\n// import { TransactionPaneComponent } from \"./types\"\n// export const TransactionPane: TransactionPaneComponent = ({\n//   transaction,\n//   loading,\n//   setTransactionApproval: consumerSetTransactionApproval,\n// }) => {\n//   const [approved, setApproved] = useState(transaction.approved)\n//   return (\n//     <div className=\"RampPane\">\n//       <div className=\"RampPane--content\">\n//         <p className=\"RampText\">{transaction.merchant} </p>\n//         <b>{moneyFormatter.format(transaction.amount)}</b>\n//         <p className=\"RampText--hushed RampText--s\">\n//           {transaction.employee.firstName} {transaction.employee.lastName} - {transaction.date}\n//         </p>\n//       </div>\n//       <InputCheckbox\n//         id={transaction.id}\n//         checked={approved}\n//         disabled={loading}\n//         onChange={async (newValue) => {\n//           await consumerSetTransactionApproval({\n//             transactionId: transaction.id,\n//             newValue,\n//           })\n//           setApproved(newValue)\n//         }}\n//       />\n//     </div>\n//   )\n// }\n// const moneyFormatter = new Intl.NumberFormat(\"en-US\", {\n//   style: \"currency\",\n//   currency: \"USD\",\n// })\nimport { InputCheckbox } from \"../InputCheckbox\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TransactionPane = _ref => {\n  let {\n    transaction,\n    loading,\n    setTransactionApproval\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"RampPane\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"RampPane--content\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"RampText\",\n        children: [transaction.merchant, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"b\", {\n        children: moneyFormatter.format(transaction.amount)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"RampText--hushed RampText--s\",\n        children: [transaction.employee.firstName, \" \", transaction.employee.lastName, \" - \", transaction.date]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InputCheckbox, {\n      id: transaction.id,\n      checked: transaction.approved,\n      disabled: loading,\n      onChange: async newValue => {\n        await setTransactionApproval({\n          transactionId: transaction.id,\n          newValue\n        });\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n_c = TransactionPane;\nconst moneyFormatter = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\"\n});\n\nvar _c;\n\n$RefreshReg$(_c, \"TransactionPane\");","map":{"version":3,"names":["InputCheckbox","TransactionPane","transaction","loading","setTransactionApproval","merchant","moneyFormatter","format","amount","employee","firstName","lastName","date","id","approved","newValue","transactionId","Intl","NumberFormat","style","currency"],"sources":["/Users/kushalc/Downloads/ramp-fe-challenge/src/components/Transactions/TransactionPane.tsx"],"sourcesContent":["// import { useState } from \"react\"\n// import { InputCheckbox } from \"../InputCheckbox\"\n// import { TransactionPaneComponent } from \"./types\"\n\n// export const TransactionPane: TransactionPaneComponent = ({\n//   transaction,\n//   loading,\n//   setTransactionApproval: consumerSetTransactionApproval,\n// }) => {\n//   const [approved, setApproved] = useState(transaction.approved)\n\n//   return (\n//     <div className=\"RampPane\">\n//       <div className=\"RampPane--content\">\n//         <p className=\"RampText\">{transaction.merchant} </p>\n//         <b>{moneyFormatter.format(transaction.amount)}</b>\n//         <p className=\"RampText--hushed RampText--s\">\n//           {transaction.employee.firstName} {transaction.employee.lastName} - {transaction.date}\n//         </p>\n//       </div>\n//       <InputCheckbox\n//         id={transaction.id}\n//         checked={approved}\n//         disabled={loading}\n//         onChange={async (newValue) => {\n//           await consumerSetTransactionApproval({\n//             transactionId: transaction.id,\n//             newValue,\n//           })\n\n//           setApproved(newValue)\n//         }}\n//       />\n//     </div>\n//   )\n// }\n\n// const moneyFormatter = new Intl.NumberFormat(\"en-US\", {\n//   style: \"currency\",\n//   currency: \"USD\",\n// })\n\nimport { InputCheckbox } from \"../InputCheckbox\"\nimport { TransactionPaneComponent } from \"./types\"\n\nexport const TransactionPane: TransactionPaneComponent = ({\n  transaction,\n  loading,\n  setTransactionApproval,\n}) => {\n  return (\n    <div className=\"RampPane\">\n      <div className=\"RampPane--content\">\n        <p className=\"RampText\">{transaction.merchant} </p>\n        <b>{moneyFormatter.format(transaction.amount)}</b>\n        <p className=\"RampText--hushed RampText--s\">\n          {transaction.employee.firstName} {transaction.employee.lastName} - {transaction.date}\n        </p>\n      </div>\n      <InputCheckbox\n        id={transaction.id}\n        checked={transaction.approved}\n        disabled={loading}\n        onChange={async (newValue) => {\n          await setTransactionApproval({ transactionId: transaction.id, newValue })\n        }}\n      />\n    </div>\n  )\n}\n\nconst moneyFormatter = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\",\n})\n"],"mappings":";AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA,SAASA,aAAT,QAA8B,kBAA9B;;AAGA,OAAO,MAAMC,eAAyC,GAAG,QAInD;EAAA,IAJoD;IACxDC,WADwD;IAExDC,OAFwD;IAGxDC;EAHwD,CAIpD;EACJ,oBACE;IAAK,SAAS,EAAC,UAAf;IAAA,wBACE;MAAK,SAAS,EAAC,mBAAf;MAAA,wBACE;QAAG,SAAS,EAAC,UAAb;QAAA,WAAyBF,WAAW,CAACG,QAArC;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAEE;QAAA,UAAIC,cAAc,CAACC,MAAf,CAAsBL,WAAW,CAACM,MAAlC;MAAJ;QAAA;QAAA;QAAA;MAAA,QAFF,eAGE;QAAG,SAAS,EAAC,8BAAb;QAAA,WACGN,WAAW,CAACO,QAAZ,CAAqBC,SADxB,OACoCR,WAAW,CAACO,QAAZ,CAAqBE,QADzD,SACsET,WAAW,CAACU,IADlF;MAAA;QAAA;QAAA;QAAA;MAAA,QAHF;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAQE,QAAC,aAAD;MACE,EAAE,EAAEV,WAAW,CAACW,EADlB;MAEE,OAAO,EAAEX,WAAW,CAACY,QAFvB;MAGE,QAAQ,EAAEX,OAHZ;MAIE,QAAQ,EAAE,MAAOY,QAAP,IAAoB;QAC5B,MAAMX,sBAAsB,CAAC;UAAEY,aAAa,EAAEd,WAAW,CAACW,EAA7B;UAAiCE;QAAjC,CAAD,CAA5B;MACD;IANH;MAAA;MAAA;MAAA;IAAA,QARF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAmBD,CAxBM;KAAMd,e;AA0Bb,MAAMK,cAAc,GAAG,IAAIW,IAAI,CAACC,YAAT,CAAsB,OAAtB,EAA+B;EACpDC,KAAK,EAAE,UAD6C;EAEpDC,QAAQ,EAAE;AAF0C,CAA/B,CAAvB"},"metadata":{},"sourceType":"module"}