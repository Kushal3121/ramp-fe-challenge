{"ast":null,"code":"var _jsxFileName = \"/Users/kushalc/Downloads/ramp-fe-challenge/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport { Fragment, useCallback, useEffect, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n\n  const {\n    data: employees,\n    loading: employeesLoading,\n    ...employeeUtils\n  } = useEmployees();\n  const {\n    data: paginatedTransactions,\n    ...paginatedTransactionsUtils\n  } = usePaginatedTransactions();\n  const {\n    data: transactionsByEmployee,\n    ...transactionsByEmployeeUtils\n  } = useTransactionsByEmployee();\n  const [allTransactions, setAllTransactions] = useState([]);\n  const [modifiedTransactionIds, setModifiedTransactionIds] = useState({});\n  const loadAllTransactions = useCallback(async () => {\n    transactionsByEmployeeUtils.invalidateData();\n    await employeeUtils.fetchAll();\n    await paginatedTransactionsUtils.fetchAll();\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  const loadTransactionsByEmployee = useCallback(async employeeId => {\n    paginatedTransactionsUtils.invalidateData();\n    await transactionsByEmployeeUtils.fetchById(employeeId);\n  }, [paginatedTransactionsUtils, transactionsByEmployeeUtils]); // Update the modified transactions map when a transaction approval changes\n\n  const handleTransactionApprovalChange = useCallback((transactionId, newValue) => {\n    setModifiedTransactionIds(prev => ({ ...prev,\n      [transactionId]: newValue\n    }));\n  }, []); // Apply modifications to transactions fetched from API\n\n  const applyTransactionModifications = useCallback(transactions => {\n    return transactions.map(transaction => {\n      if (transaction.id in modifiedTransactionIds) {\n        return { ...transaction,\n          approved: modifiedTransactionIds[transaction.id]\n        };\n      }\n\n      return transaction;\n    });\n  }, [modifiedTransactionIds]);\n  useEffect(() => {\n    if (transactionsByEmployee) {\n      const modifiedTransactions = applyTransactionModifications(transactionsByEmployee);\n      setAllTransactions(modifiedTransactions);\n    } else if (paginatedTransactions !== null && paginatedTransactions !== void 0 && paginatedTransactions.data) {\n      if (allTransactions.length === 0) {\n        const modifiedTransactions = applyTransactionModifications(paginatedTransactions.data);\n        setAllTransactions(modifiedTransactions);\n      } else {\n        // Merge new transactions with existing ones, preserving modifications\n        const existingIds = new Set(allTransactions.map(t => t.id));\n        const newTransactions = paginatedTransactions.data.filter(t => !existingIds.has(t.id));\n        const modifiedNewTransactions = applyTransactionModifications(newTransactions);\n        setAllTransactions(prev => [...prev, ...modifiedNewTransactions]);\n      }\n    }\n  }, [paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.data, transactionsByEmployee, applyTransactionModifications, allTransactions]);\n  useEffect(() => {\n    if (employees === null && !employeesLoading) {\n      loadAllTransactions();\n    }\n  }, [employeesLoading, employees, loadAllTransactions]);\n\n  const handleViewMoreClick = async () => {\n    await paginatedTransactionsUtils.fetchAll();\n  };\n\n  const employeeOptions = employees ? [EMPTY_EMPLOYEE, ...employees] : []; // Apply any modified transaction values to whatever is being displayed\n\n  const displayTransactions = transactionsByEmployee ? applyTransactionModifications(transactionsByEmployee) : allTransactions;\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"MainContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputSelect, {\n        isLoading: employeesLoading,\n        defaultValue: EMPTY_EMPLOYEE,\n        items: employeeOptions,\n        label: \"Filter by employee\",\n        loadingLabel: \"Loading employees\",\n        parseItem: item => ({\n          value: item.id,\n          label: `${item.firstName} ${item.lastName}`\n        }),\n        onChange: async newValue => {\n          if (newValue === null) {\n            return;\n          }\n\n          if (newValue.id === EMPTY_EMPLOYEE.id) {\n            await loadAllTransactions();\n          } else {\n            await loadTransactionsByEmployee(newValue.id);\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampGrid\",\n        children: [/*#__PURE__*/_jsxDEV(Transactions, {\n          transactions: displayTransactions,\n          onApprovalChange: handleTransactionApprovalChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 11\n        }, this), (paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.nextPage) && !transactionsByEmployee && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"RampButton\",\n          disabled: paginatedTransactionsUtils.loading,\n          onClick: handleViewMoreClick,\n          children: \"View More\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"WJUbY0fVfh2WC11RHwVPAcsmTxI=\", false, function () {\n  return [useEmployees, usePaginatedTransactions, useTransactionsByEmployee];\n});\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Fragment","useCallback","useEffect","useState","InputSelect","Instructions","Transactions","useEmployees","usePaginatedTransactions","useTransactionsByEmployee","EMPTY_EMPLOYEE","App","data","employees","loading","employeesLoading","employeeUtils","paginatedTransactions","paginatedTransactionsUtils","transactionsByEmployee","transactionsByEmployeeUtils","allTransactions","setAllTransactions","modifiedTransactionIds","setModifiedTransactionIds","loadAllTransactions","invalidateData","fetchAll","loadTransactionsByEmployee","employeeId","fetchById","handleTransactionApprovalChange","transactionId","newValue","prev","applyTransactionModifications","transactions","map","transaction","id","approved","modifiedTransactions","length","existingIds","Set","t","newTransactions","filter","has","modifiedNewTransactions","handleViewMoreClick","employeeOptions","displayTransactions","item","value","label","firstName","lastName","nextPage"],"sources":["/Users/kushalc/Downloads/ramp-fe-challenge/src/App.tsx"],"sourcesContent":["import { Fragment, useCallback, useEffect, useState } from \"react\"\nimport { InputSelect } from \"./components/InputSelect\"\nimport { Instructions } from \"./components/Instructions\"\nimport { Transactions } from \"./components/Transactions\"\nimport { useEmployees } from \"./hooks/useEmployees\"\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\"\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\"\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\"\nimport { Employee, Transaction } from \"./utils/types\"\n\nexport function App() {\n  const { data: employees, loading: employeesLoading, ...employeeUtils } = useEmployees()\n  const { data: paginatedTransactions, ...paginatedTransactionsUtils } = usePaginatedTransactions()\n  const { data: transactionsByEmployee, ...transactionsByEmployeeUtils } = useTransactionsByEmployee()\n  const [allTransactions, setAllTransactions] = useState<Transaction[]>([])\n  const [modifiedTransactionIds, setModifiedTransactionIds] = useState<Record<string, boolean>>({})\n\n  const loadAllTransactions = useCallback(async () => {\n    transactionsByEmployeeUtils.invalidateData()\n    await employeeUtils.fetchAll()\n    await paginatedTransactionsUtils.fetchAll()\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils])\n\n  const loadTransactionsByEmployee = useCallback(\n    async (employeeId: string) => {\n      paginatedTransactionsUtils.invalidateData()\n      await transactionsByEmployeeUtils.fetchById(employeeId)\n    },\n    [paginatedTransactionsUtils, transactionsByEmployeeUtils]\n  )\n\n  // Update the modified transactions map when a transaction approval changes\n  const handleTransactionApprovalChange = useCallback((transactionId: string, newValue: boolean) => {\n    setModifiedTransactionIds((prev) => ({\n      ...prev,\n      [transactionId]: newValue,\n    }))\n  }, [])\n\n  // Apply modifications to transactions fetched from API\n  const applyTransactionModifications = useCallback(\n    (transactions: Transaction[]): Transaction[] => {\n      return transactions.map((transaction) => {\n        if (transaction.id in modifiedTransactionIds) {\n          return {\n            ...transaction,\n            approved: modifiedTransactionIds[transaction.id],\n          }\n        }\n        return transaction\n      })\n    },\n    [modifiedTransactionIds]\n  )\n\n  useEffect(() => {\n    if (transactionsByEmployee) {\n      const modifiedTransactions = applyTransactionModifications(transactionsByEmployee)\n      setAllTransactions(modifiedTransactions)\n    } else if (paginatedTransactions?.data) {\n      if (allTransactions.length === 0) {\n        const modifiedTransactions = applyTransactionModifications(paginatedTransactions.data)\n        setAllTransactions(modifiedTransactions)\n      } else {\n        // Merge new transactions with existing ones, preserving modifications\n        const existingIds = new Set(allTransactions.map((t) => t.id))\n        const newTransactions = paginatedTransactions.data.filter((t) => !existingIds.has(t.id))\n        const modifiedNewTransactions = applyTransactionModifications(newTransactions)\n        setAllTransactions((prev) => [...prev, ...modifiedNewTransactions])\n      }\n    }\n  }, [\n    paginatedTransactions?.data,\n    transactionsByEmployee,\n    applyTransactionModifications,\n    allTransactions,\n  ])\n\n  useEffect(() => {\n    if (employees === null && !employeesLoading) {\n      loadAllTransactions()\n    }\n  }, [employeesLoading, employees, loadAllTransactions])\n\n  const handleViewMoreClick = async () => {\n    await paginatedTransactionsUtils.fetchAll()\n  }\n\n  const employeeOptions = employees ? [EMPTY_EMPLOYEE, ...employees] : []\n\n  // Apply any modified transaction values to whatever is being displayed\n  const displayTransactions = transactionsByEmployee\n    ? applyTransactionModifications(transactionsByEmployee)\n    : allTransactions\n\n  return (\n    <Fragment>\n      <main className=\"MainContainer\">\n        <Instructions />\n        <hr className=\"RampBreak--l\" />\n        <InputSelect<Employee>\n          isLoading={employeesLoading}\n          defaultValue={EMPTY_EMPLOYEE}\n          items={employeeOptions}\n          label=\"Filter by employee\"\n          loadingLabel=\"Loading employees\"\n          parseItem={(item) => ({\n            value: item.id,\n            label: `${item.firstName} ${item.lastName}`,\n          })}\n          onChange={async (newValue) => {\n            if (newValue === null) {\n              return\n            }\n\n            if (newValue.id === EMPTY_EMPLOYEE.id) {\n              await loadAllTransactions()\n            } else {\n              await loadTransactionsByEmployee(newValue.id)\n            }\n          }}\n        />\n        <div className=\"RampBreak--l\" />\n        <div className=\"RampGrid\">\n          <Transactions\n            transactions={displayTransactions}\n            onApprovalChange={handleTransactionApprovalChange}\n          />\n          {paginatedTransactions?.nextPage && !transactionsByEmployee && (\n            <button\n              className=\"RampButton\"\n              disabled={paginatedTransactionsUtils.loading}\n              onClick={handleViewMoreClick}\n            >\n              View More\n            </button>\n          )}\n        </div>\n      </main>\n    </Fragment>\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}