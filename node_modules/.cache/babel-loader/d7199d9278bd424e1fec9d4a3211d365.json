{"ast":null,"code":"// import { Fragment, useCallback, useEffect, useState } from \"react\"\n// import { InputSelect } from \"./components/InputSelect\"\n// import { Instructions } from \"./components/Instructions\"\n// import { Transactions } from \"./components/Transactions\"\n// import { useEmployees } from \"./hooks/useEmployees\"\n// import { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\"\n// import { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\"\n// import { EMPTY_EMPLOYEE } from \"./utils/constants\"\n// import { Employee, Transaction } from \"./utils/types\"\n// export function App() {\n//   const { data: employees, loading: employeesLoading, ...employeeUtils } = useEmployees()\n//   const { data: paginatedTransactions, ...paginatedTransactionsUtils } = usePaginatedTransactions()\n//   const { data: transactionsByEmployee, ...transactionsByEmployeeUtils } = useTransactionsByEmployee()\n//   const [allTransactions, setAllTransactions] = useState<Transaction[]>([])\n//   const loadAllTransactions = useCallback(async () => {\n//     transactionsByEmployeeUtils.invalidateData()\n//     await employeeUtils.fetchAll()\n//     await paginatedTransactionsUtils.fetchAll() //Fetch transactions separately\n//   }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils])\n//   const loadTransactionsByEmployee = useCallback(\n//     async (employeeId: string) => {\n//       paginatedTransactionsUtils.invalidateData()\n//       await transactionsByEmployeeUtils.fetchById(employeeId)\n//     },\n//     [paginatedTransactionsUtils, transactionsByEmployeeUtils]\n//   )\n//   useEffect(() => {\n//     if (transactionsByEmployee) {\n//       setAllTransactions(transactionsByEmployee)\n//     } else if (paginatedTransactions?.data && allTransactions.length === 0) {\n//       setAllTransactions(paginatedTransactions.data)\n//     }\n//   }, [paginatedTransactions?.data, transactionsByEmployee, allTransactions])\n//   useEffect(() => {\n//     if (employees === null && !employeesLoading) {\n//       loadAllTransactions()\n//     }\n//   }, [employeesLoading, employees, loadAllTransactions])\n//   const handleViewMoreClick = async () => {\n//     await paginatedTransactionsUtils.fetchAll()\n//     if (paginatedTransactions?.data) {\n//       setAllTransactions((prevTransactions) => [...prevTransactions, ...paginatedTransactions.data])\n//     }\n//   }\n//   const employeeOptions = employees ? [EMPTY_EMPLOYEE, ...employees] : []\n//   const displayTransactions = transactionsByEmployee ?? allTransactions\n//   return (\n//     <Fragment>\n//       <main className=\"MainContainer\">\n//         <Instructions />\n//         <hr className=\"RampBreak--l\" />\n//         <InputSelect<Employee>\n//           isLoading={employeesLoading}\n//           defaultValue={EMPTY_EMPLOYEE}\n//           items={employeeOptions}\n//           label=\"Filter by employee\"\n//           loadingLabel=\"Loading employees\"\n//           parseItem={(item) => ({\n//             value: item.id,\n//             label: `${item.firstName} ${item.lastName}`,\n//           })}\n//           onChange={async (newValue) => {\n//             if (newValue === null) {\n//               return\n//             }\n//             if (newValue.id === EMPTY_EMPLOYEE.id) {\n//               setAllTransactions([])\n//               await loadAllTransactions()\n//             } else {\n//               await loadTransactionsByEmployee(newValue.id)\n//             }\n//           }}\n//         />\n//         <div className=\"RampBreak--l\" />\n//         <div className=\"RampGrid\">\n//           <Transactions transactions={displayTransactions} />\n//           {paginatedTransactions?.nextPage && !transactionsByEmployee && (\n//             <button\n//               className=\"RampButton\"\n//               disabled={paginatedTransactionsUtils.loading}\n//               onClick={handleViewMoreClick}\n//             >\n//               View More\n//             </button>\n//           )}\n//         </div>\n//       </main>\n//     </Fragment>\n//   )\n// }","map":{"version":3,"names":[],"sources":["/Users/kushalc/Downloads/ramp-fe-challenge/src/App.tsx"],"sourcesContent":["// import { Fragment, useCallback, useEffect, useState } from \"react\"\n// import { InputSelect } from \"./components/InputSelect\"\n// import { Instructions } from \"./components/Instructions\"\n// import { Transactions } from \"./components/Transactions\"\n// import { useEmployees } from \"./hooks/useEmployees\"\n// import { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\"\n// import { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\"\n// import { EMPTY_EMPLOYEE } from \"./utils/constants\"\n// import { Employee, Transaction } from \"./utils/types\"\n\n// export function App() {\n//   const { data: employees, loading: employeesLoading, ...employeeUtils } = useEmployees()\n//   const { data: paginatedTransactions, ...paginatedTransactionsUtils } = usePaginatedTransactions()\n//   const { data: transactionsByEmployee, ...transactionsByEmployeeUtils } = useTransactionsByEmployee()\n//   const [allTransactions, setAllTransactions] = useState<Transaction[]>([])\n\n//   const loadAllTransactions = useCallback(async () => {\n//     transactionsByEmployeeUtils.invalidateData()\n//     await employeeUtils.fetchAll()\n//     await paginatedTransactionsUtils.fetchAll() //Fetch transactions separately\n//   }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils])\n\n//   const loadTransactionsByEmployee = useCallback(\n//     async (employeeId: string) => {\n//       paginatedTransactionsUtils.invalidateData()\n//       await transactionsByEmployeeUtils.fetchById(employeeId)\n//     },\n//     [paginatedTransactionsUtils, transactionsByEmployeeUtils]\n//   )\n\n//   useEffect(() => {\n//     if (transactionsByEmployee) {\n//       setAllTransactions(transactionsByEmployee)\n//     } else if (paginatedTransactions?.data && allTransactions.length === 0) {\n//       setAllTransactions(paginatedTransactions.data)\n//     }\n//   }, [paginatedTransactions?.data, transactionsByEmployee, allTransactions])\n\n//   useEffect(() => {\n//     if (employees === null && !employeesLoading) {\n//       loadAllTransactions()\n//     }\n//   }, [employeesLoading, employees, loadAllTransactions])\n\n//   const handleViewMoreClick = async () => {\n//     await paginatedTransactionsUtils.fetchAll()\n\n//     if (paginatedTransactions?.data) {\n//       setAllTransactions((prevTransactions) => [...prevTransactions, ...paginatedTransactions.data])\n//     }\n//   }\n\n//   const employeeOptions = employees ? [EMPTY_EMPLOYEE, ...employees] : []\n//   const displayTransactions = transactionsByEmployee ?? allTransactions\n\n//   return (\n//     <Fragment>\n//       <main className=\"MainContainer\">\n//         <Instructions />\n//         <hr className=\"RampBreak--l\" />\n//         <InputSelect<Employee>\n//           isLoading={employeesLoading}\n//           defaultValue={EMPTY_EMPLOYEE}\n//           items={employeeOptions}\n//           label=\"Filter by employee\"\n//           loadingLabel=\"Loading employees\"\n//           parseItem={(item) => ({\n//             value: item.id,\n//             label: `${item.firstName} ${item.lastName}`,\n//           })}\n//           onChange={async (newValue) => {\n//             if (newValue === null) {\n//               return\n//             }\n\n//             if (newValue.id === EMPTY_EMPLOYEE.id) {\n//               setAllTransactions([])\n//               await loadAllTransactions()\n//             } else {\n//               await loadTransactionsByEmployee(newValue.id)\n//             }\n//           }}\n//         />\n//         <div className=\"RampBreak--l\" />\n//         <div className=\"RampGrid\">\n//           <Transactions transactions={displayTransactions} />\n//           {paginatedTransactions?.nextPage && !transactionsByEmployee && (\n//             <button\n//               className=\"RampButton\"\n//               disabled={paginatedTransactionsUtils.loading}\n//               onClick={handleViewMoreClick}\n//             >\n//               View More\n//             </button>\n//           )}\n//         </div>\n//       </main>\n//     </Fragment>\n//   )\n// }\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}